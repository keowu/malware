/*
 _   __ _____ _____  _    _ _   _
| | / /|  ___|  _  || |  | | | | |
| |/ / | |__ | | | || |  | | | | |
|    \ |  __|| | | || |/\| | | | |
| |\  \| |___\ \_/ /\  /\  / |_| |
\_| \_/\____/ \___/  \/  \/ \___/
                            2023
Copyright (c) Fluxuss Cyber Tech Desenvolvimento de Software, SLU (FLUXUSS)
Copyright (c) Fluxuss Software Security, LLC

*/
#include "dropped_file_decrypt.hh"


auto DropedFile::executeDecrypt() -> void {
    
    for (auto i = 0; i < this->szEncryptedFile; i++) {

        auto chByte = (33 * this->strAlphabet[(int)i % 57]) & 0xA5 ^ this->ptrEncrypted[i];

        this->ptrEncrypted[i] = 2 * chByte;
        this->ptrEncrypted[i] -= chByte;
        
        this->uiDecryptedCHK = i + 1;
    }

}

auto DropedFile::decrypt() -> unsigned char* {

    this->executeDecrypt();

    return this->ptrEncrypted;
}

auto DropedFile::test() -> void {

    std::cout << "Executing decrypted file testes\n";

    if (this->szEncryptedFile == this->uiDecryptedCHK) std::cout << "[OK] Passed on decrypted CHK\n";

    if (*this->ptrEncrypted == 0x4D && *(this->ptrEncrypted + 1) == 0x5A) std::cout << "[OK] Passed on valid PE binary";

    std::cout << "Test ended\n";

}