/*
 _   __ _____ _____  _    _ _   _
| | / /|  ___|  _  || |  | | | | |
| |/ / | |__ | | | || |  | | | | |
|    \ |  __|| | | || |/\| | | | |
| |\  \| |___\ \_/ /\  /\  / |_| |
\_| \_/\____/ \___/  \/  \/ \___/
                            2023
Copyright (c) Fluxuss Cyber Tech Desenvolvimento de Software, SLU (FLUXUSS)
Copyright (c) Fluxuss Software Security, LLC

*/
#include "file_system_working.hh"

auto FileSystemWorking::read_all_file_get_data(const std::string& strFilePath) -> std::pair<std::size_t, unsigned char*> {

    std::ifstream f;

    f.open(strFilePath, std::ios::binary | std::ios::ate);

    if(!f.is_open()) std::cout << "[X] Error file read !\n";

    auto szFile = f.tellg();

    f.close();

    auto chFileBytes = new unsigned char[szFile];

    f.open(strFilePath, std::ios::in | std::ios::binary);

    f.read((char *)chFileBytes, szFile);

    f.close();

    return std::make_pair(szFile, chFileBytes);
}

auto FileSystemWorking::write_all_file_data_on_disk(const std::string& strFilePath, unsigned char* ptrBuff, std::size_t szBuff) -> void {

    std::ofstream f(strFilePath, std::ios::out | std::ios::binary);

    if(!f.is_open()) std::cout << "[X] Error file write\n";

    f.write((char*)ptrBuff, szBuff);

    f.close();

    std::cout << "[OK] Write out file success\n";

}